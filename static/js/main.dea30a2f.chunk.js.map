{"version":3,"sources":["components/Navbar.js","components/fullpage.js","sections/TitlSection.js","sections/Aboutsection.js","components/cards.js","sections/cardssection.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","children","this","props","className","activeClass","to","spy","smooth","offset","duration","onSetActive","handleSetActive","id","href","Component","FullPage","SectionFirst","data","title1","title2","Object","keys","links","map","url","name","SectionSecond","section","title","items","container","Cards","skill","src","content","image","CradsSection","App","state","color","backgroundColor","setState","style","onClick","ChangeColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dea30a2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <nav className=\"nav\">\r\n        <div>{children}</div>\r\n        <div className=\"scrolls\">\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"test1\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={50}\r\n            duration={500}\r\n            onSetActive={this.handleSetActive}\r\n          >\r\n            <a className=\"decoration1\" id=\"a1\" href=\"\">About</a>\r\n          </Link>\r\n          {\"   \"}\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"test2\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={50}\r\n            duration={500}\r\n            onSetActive={this.handleSetActive}\r\n          >\r\n            <a id=\"a1\" href=\"\" className=\"decoration2\">Skills</a>\r\n          </Link>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./fullpage.css\";\r\nclass FullPage extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className={`fullpage ${this.props.className || \"\"}`}>{children}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FullPage;\r\n","import React, { Component } from \"react\";\r\nimport data from \"../data.json\";\r\nimport FullPage from \"../components/fullpage\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport \"./Titlsection.css\";\r\n\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nclass SectionFirst extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FullPage className=\"first\">\r\n          <div>\r\n            <div>\r\n              <h1 className=\"tSize1\">{data.title1}</h1>\r\n              <h2 className=\"tSize2\">{data.title2}</h2>\r\n            </div>\r\n            <div className=\"links\">\r\n              {Object.keys(data.links).map((keys) => {\r\n                return (\r\n                  <div className=\"icons\">\r\n                    <SocialIcon url={data.links[keys]} />\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </FullPage>\r\n\r\n        <Element name=\"test1\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionFirst;\r\n","import React, { Component } from \"react\";\r\nimport data from \"../data.json\";\r\nimport FullPage from \"../components/fullpage\";\r\nimport \"./Aboutsection.css\";\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nclass SectionSecond extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"border\">\r\n        <FullPage className=\"second\">\r\n          <div>\r\n            <h3 className=\"tSize2\">{data.section[0].title}</h3>\r\n            <div className=\"p\">\r\n              <div>{data.section[0].items[0].container}</div>\r\n              <div>{data.section[0].items[1].container}</div>\r\n              <div>{data.section[0].items[2].container}</div>\r\n            </div>\r\n          </div>\r\n        </FullPage>\r\n        <Element name=\"test2\" className=\"element\"></Element>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SectionSecond;\r\n","import React, { Component } from \"react\";\r\nimport \"./cards.css\";\r\nimport data from \"../data.json\";\r\n\r\nclass Cards extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3 className=\"tSize3\">{data.section[1].title}</h3>\r\n        <div className=\"wrapper\">\r\n          {data.section[1].items.map((skill) => {\r\n            return (\r\n              <div className=\"cards\" >\r\n                <div>\r\n                  <img src={skill.content.image} />\r\n                </div>\r\n                <div>\r\n                  <h4 className=\"tSize4\">{skill.content.title}</h4>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\r\nimport FullPage from \"../components/fullpage\";\r\nimport Cards from \"../components/cards\";\r\nimport \"./cardssection.css\";\r\n\r\nclass CradsSection extends Component {\r\n  render() {\r\n    return (\r\n      <FullPage className=\"first\">\r\n        <Cards />\r\n      </FullPage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CradsSection;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/Navbar\";\nimport SectionFirst from \"./sections/TitlSection\";\nimport SectionSecond from \"./sections/Aboutsection\";\nimport CradsSection from \"./sections/cardssection\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    color: \"black\",\n    backgroundColor: \"tomato\",\n  };\n  ChangeColor() {\n    this.setState({\n      backgroundColor:\n        this.state.backgroundColor === \"tomato\" ? \"orange\" : \"tomato\",\n      color: this.state.color === \"black\" ? \"white\" : \"black\",\n    });\n  }\n  render() {\n    return (\n      <div\n        style={{\n          backgroundColor: this.state.backgroundColor,\n          color: this.state.color,\n        }}\n      >\n        <NavBar>\n          <img\n            src=\"./images/paint.png\"\n            href=\"#\"\n            className=\"img\"\n            onClick={() => {\n              this.ChangeColor();\n            }}\n          />\n        </NavBar>\n        <SectionFirst />\n        <SectionSecond />\n        <CradsSection />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}